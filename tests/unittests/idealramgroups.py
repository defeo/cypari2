# -*- coding: utf-8 -*-
# This file was generated by tests_generator.py
# Generated the 09/21/2017

"""Original pari/GP test file idealramgroups :
{
  K=nfinit(x^30 - 240*x^28 + 24364*x^26 - 1366520*x^24 + 46492470*x^22 - 994986280*x^20 + 13527103660*x^18 - 116596891080*x^16 + 634140564945*x^14 - 2144111162280*x^12 + 4349007947424*x^10 - 4933119511040*x^8 + 2746986107136*x^6 - 564152514560*x^4 + 40138752000*x^2 - 409600000);
  G=galoisinit(K);
  forprime(p=2,37,
    pr = idealprimedec(K,p)[1];
    print(pr.p,":", apply(galoisidentify,idealramgroups(K,G,pr))))
}
K=nfinit(x^6 + 12*x^5 + 60*x^4 + 376*x^3 + 80268*x^2 + 4569240*x + 66227068);
G=galoisinit(K);
D=idealprimedec(K,29)[1];
[idealfrobenius(K,G,D),idealramgroups(K,G,D)]

K=nfinit(polcyclo(24));
G=galoisinit(K);
P=idealprimedec(K,2)[1];
idealramgroups(K,G,P)

\\#1755
P=x^8-12*x^6+36*x^4-36*x^2+9;N=nfinit(P);G=galoisinit(N);
idealramgroups(N,G,idealprimedec(N,3)[1])
"""
import unittest
from testutils import primes
from cypari2 import Pari, PariError

pari = Pari()


class TestIdealramgroups(unittest.TestCase):
    def test_idealramgroups(self):
        K = pari.nfinit('x^30 - 240*x^28 + 24364*x^26 - 1366520*x^24 + 46492470*x^22 - 994986280*x^20 + 13527103660' +
                        '*x^18 - 116596891080*x^16 + 634140564945*x^14 - 2144111162280*x^12 + 4349007947424*x^10 ' +
                        '- 4933119511040*x^8 + 2746986107136*x^6 - 564152514560*x^4 + 40138752000*x^2 - 409600000')
        G = pari.galoisinit(K);

        l = ['2:[[2, 1], [2, 1], [2, 1], [2, 1]]',
             '3:[[15, 1]]',
             '5:[[2, 1], [2, 1]]',
             '7:[[2, 1]]',
             '11:[[2, 1]]',
             '13:[[15, 1]]',
             '17:[[2, 1]]',
             '19:[[10, 1], [5, 1]]',
             '23:[[2, 1]]',
             '29:[[2, 1]]',
             '31:[[15, 1]]',
             '37:[[15, 1], [3, 1]]']

        i = 0
        for p in primes(38):
            pr = pari.idealprimedec(K, p)[0];
            self.assertEquals("%d:%s" % (p, pari.apply(pari.galoisidentify, pari.idealramgroups(K, G, pr))), l[i])
            i += 1

        K = pari.nfinit('x^6 + 12*x^5 + 60*x^4 + 376*x^3 + 80268*x^2 + 4569240*x + 66227068');
        G = pari.galoisinit(K);
        D = pari.idealprimedec(K, 29)[0];
        self.assertEquals(str(pari.idealfrobenius(K, G, D)), 'Vecsmall([6, 3, 2, 5, 4, 1])')
        self.assertEquals(str(pari.idealramgroups(K, G, D)), '[[[Vecsmall([6, 3, 2, 5, 4, 1])], Vecsmall([2])]]')

        K = pari.nfinit(pari.polcyclo(24));
        G = pari.galoisinit(K);
        P = pari.idealprimedec(K, 2)[0];
        self.assertEquals(pari.idealramgroups(K, G, P),
                          '[[[Vecsmall([2, 1, 4, 3, 6, 5, 8, 7]), Vecsmall([3, 4, 1, 2, 7, 8, 5, 6]), Vecsmall([5, ' +
                          '6, 7, 8, 1, 2, 3, 4])], Vecsmall([2, 2, 2])], [[Vecsmall([2, 1, 4, 3, 6, 5, 8, 7]), Vecs' +
                          'mall([3, 4, 1, 2, 7, 8, 5, 6])], Vecsmall([2, 2])], [[Vecsmall([2, 1, 4, 3, 6, 5, 8, 7])' +
                          ', Vecsmall([3, 4, 1, 2, 7, 8, 5, 6])], Vecsmall([2, 2])], [[Vecsmall([3, 4, 1, 2, 7, 8, ' +
                          '5, 6])], Vecsmall([2])], [[Vecsmall([3, 4, 1, 2, 7, 8, 5, 6])], Vecsmall([2])]]')

        # 1755
        P = 'x^8-12*x^6+36*x^4-36*x^2+9';
        N = pari.nfinit(P);
        G = pari.galoisinit(N);
        self.assertEquals(pari.idealramgroups(N, G, pari.idealprimedec(N, 3)[0]),
                          '[[[Vecsmall([7, 1, 5, 3, 6, 4, 8, 2]), Vecsmall([3, 5, 8, 2, 7, 1, 4, 6])],Vecsmall([4, ' +
                          '2])], [[Vecsmall([7, 1, 5, 3, 6, 4, 8, 2])], Vecsmall([4])]]')

"""**** Original expected results ****

2:[[2, 1], [2, 1], [2, 1], [2, 1]]
3:[[15, 1]]
5:[[2, 1], [2, 1]]
7:[[2, 1]]
11:[[2, 1]]
13:[[15, 1]]
17:[[2, 1]]
19:[[10, 1], [5, 1]]
23:[[2, 1]]
29:[[2, 1]]
31:[[15, 1]]
37:[[15, 1], [3, 1]]
[Vecsmall([6, 3, 2, 5, 4, 1]), [[[Vecsmall([6, 3, 2, 5, 4, 1])], Vecsmall([2
])]]]
[[[Vecsmall([2, 1, 4, 3, 6, 5, 8, 7]), Vecsmall([3, 4, 1, 2, 7, 8, 5, 6]), V
ecsmall([5, 6, 7, 8, 1, 2, 3, 4])], Vecsmall([2, 2, 2])], [[Vecsmall([2, 1, 
4, 3, 6, 5, 8, 7]), Vecsmall([3, 4, 1, 2, 7, 8, 5, 6])], Vecsmall([2, 2])], 
[[Vecsmall([2, 1, 4, 3, 6, 5, 8, 7]), Vecsmall([3, 4, 1, 2, 7, 8, 5, 6])], V
ecsmall([2, 2])], [[Vecsmall([3, 4, 1, 2, 7, 8, 5, 6])], Vecsmall([2])], [[V
ecsmall([3, 4, 1, 2, 7, 8, 5, 6])], Vecsmall([2])]]
[[[Vecsmall([7, 1, 5, 3, 6, 4, 8, 2]), Vecsmall([3, 5, 8, 2, 7, 1, 4, 6])], 
Vecsmall([4, 2])], [[Vecsmall([7, 1, 5, 3, 6, 4, 8, 2])], Vecsmall([4])]]

"""
