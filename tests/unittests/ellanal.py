# -*- coding: utf-8 -*-
# This file was generated by tests_generator.py
# Generated the 09/21/2017

"""Original pari/GP test file ellanal :
default(realprecision,38);
rk(x)=x=ellinit(x);ellanalyticrank(x);
rk([0, -1, 1, -10, -20])
rk([0, 0, 1, -1, 0])
rk([0, 1, 1, -2, 0])
rk([0, 0, 1, -7, 6])
rk([-5187, 176830])

he(x)=x=ellinit(x);ellheegner(x);
he([1, 1, 0, -1297, -18530])
he([0, -1, 1, -33, 93])
he([-157^2,0])
he([0,0,-9/484,0,-27/234256])
getheap()[1]

E=ellinit([0,-1437004800,0,458885065605120000,0]);
ellglobalred(E); ellheegner(E)

L = ellinit([0,0,1,7,6]);
ellL1(L)
ellL1(L,1)
ellL1(L,3)
ellL1(ellinit([0,1,1,-2,0]),2)
default(realprecision,115);
ellL1(L)
ellL1(L,1)
ellL1(L,3)
ellL1(ellinit([0,1,1,-2,0]),2)

default(realprecision,19);
ellmoddegree(ellinit([0,1,0,-4,-4]))
ellmoddegree(ellinit([-4,0]))
ellmoddegree(ellinit([0,-1,0,4,-4]))
ellmoddegree(ellinit([0,-1,0,-8,-16]))
ellmoddegree(ellinit([0,0,1,0,-7]))
ellmoddegree(ellinit([1,-1,0,0,-5]))
ellmoddegree(ellinit([1,-1,0,-69,-208]))
localbitprec(9); ellmoddegree(ellinit([0, -1, 1, 0, 0]))
"""
import unittest
from cypari2 import Pari, PariError

pari = Pari()


class TestEllanal(unittest.TestCase):

    def test_ellanal(self):
        pari.set_real_precision(38)

        def rk(x):
            x = pari.ellinit(x, precision=127)
            return pari.ellanalyticrank(x, precision=127)

        self.assertEquals(str(rk([0, -1, 1, -10, -20])), '[0, 0.25384186085591068433775892335090946105]')
        self.assertEquals(str(rk([0, 0, 1, -1, 0])), '[1, 0.30599977383405230182048368332167647445]')
        self.assertEquals(str(rk([0, 1, 1, -2, 0])), '[2, 1.5186330005768535404603852157894440381]')
        self.assertEquals(str(rk([0, 0, 1, -7, 6])), '[3, 10.391099400715804138751850510360917070]')
        self.assertEquals(str(rk([-5187, 176830])), '[5, 9997.0334671722554999496820788093288461]')

    def test_ellheegner(self):
        pari.set_real_precision(38)

        def he(x):
            x = pari.ellinit(x)
            return pari.ellheegner(x)

        self.assertEquals(str(he([1, 1, 0, -1297, -18530])), '[-339/16, 691/64]')
        self.assertEquals(str(he([0, -1, 1, -33, 93])), '[-3, 12]')
        self.assertEquals(str(he([-157^2,0])), '[69648970982596494254458225/166136231668185267540804, 538962435089604615078004307258785218335/67716816556077455999228495435742408]')
        self.assertEquals(str(he([0,0,-9/484,0,-27/234256])), '[553/17424, 25469/2299968]')
        self.assertEquals(str(pari.getheap()[0]), '30')

        E = pari.ellinit([0, -1437004800, 0, 458885065605120000, 0]);
        pari.ellglobalred(E);
        self.assertEquals(str(pari.ellheegner(E)), '[1317254400, 19916886528000]')

    def test_ellL1(self):
        pari.set_real_precision(38)
        L = pari.ellinit([0, 0, 1, 7, 6], precision=127);
        self.assertEquals(str(pari.ellL1(L, precision=127)), '0')
        self.assertEquals(str(pari.ellL1(L, 1, precision=127)), '2.8053554406276820682921020105298729343')
        self.assertEquals(str(pari.ellL1(L, 3, precision=127)), '98.900778292211279593460469548777701093')
        self.assertEquals(str(pari.ellL1(pari.ellinit([0, 1, 1, -2, 0], precision=127), 2, precision=127)),
                          '1.5186330005768535404603852157894440381')
        pari.set_real_precision(115)
        self.assertEquals(pari.ellL1(L, precision=383), '0')
        self.assertEquals(str(pari.ellL1(L, 1, precision=383)), '2.8053554406276820682921020105298729342739341928943' +
                          '14010515738738778963706069444052334712747100820315923332165307854')
        self.assertEquals(str(pari.ellL1(L, 3, precision=383)), '98.900778292211279593460469548777701093725662786697' +
                          '61921051303471931786459834656024843050255154457301289878660746149')
        self.assertEquals(str(pari.ellL1(pari.ellinit([0, 1, 1, -2, 0]), 2, precision=383)), '1.51863300057685354046' +
                          '03852157894440381561950329898487031716101850959821454955611048804318700046577183337542984' +
                          '13640')

    def test_ellmoddegree(self):
        # pari.set_real_precision(19)
        self.assertEquals(pari.ellmoddegree(pari.ellinit([0, 1, 0, -4, -4]), precision=64), '[2, -53]')
        self.assertEquals(pari.ellmoddegree(pari.ellinit([-4, 0]), precision=64), '[2, -53]')
        self.assertEquals(pari.ellmoddegree(pari.ellinit([0, -1, 0, 4, -4]), precision=64), '[4, -55]')
        self.assertEquals(pari.ellmoddegree(pari.ellinit([0, -1, 0, -8, -16]), precision=64), '[8, -54]')
        self.assertEquals(pari.ellmoddegree(pari.ellinit([0, 0, 1, 0, -7]), precision=64), '[1, -55]')
        self.assertEquals(pari.ellmoddegree(pari.ellinit([1, -1, 0, 0, -5]), precision=64), '[2, -56]')
        self.assertEquals(pari.ellmoddegree(pari.ellinit([1, -1, 0, -69, -208]), precision=64), '[72, -62]')
        # pari.localbitprec(9);
        self.assertEquals(pari.ellmoddegree(pari.ellinit([0, -1, 1, 0, 0]), precision=9), '[1/5, -11]')

"""**** Original expected results ****

[0, 0.25384186085591068433775892335090946105]
[1, 0.30599977383405230182048368332167647445]
[2, 1.5186330005768535404603852157894440381]
[3, 10.391099400715804138751850510360917070]
[5, 9997.0334671722554999496820788093288461]
[-339/16, 691/64]
[-3, 12]
[69648970982596494254458225/166136231668185267540804, 5389624350896046150780
04307258785218335/67716816556077455999228495435742408]
[553/17424, 25469/2299968]
30
[1317254400, 19916886528000]
0
2.8053554406276820682921020105298729343
98.900778292211279593460469548777701093
1.5186330005768535404603852157894440381
0
2.80535544062768206829210201052987293427393419289431401051573873877896370606
9444052334712747100820315923332165307854
98.9007782922112795934604695487777010937256627866976192105130347193178645983
4656024843050255154457301289878660746149
1.51863300057685354046038521578944403815619503298984870317161018509598214549
5561104880431870004657718333754298413640
[2, -53]
[2, -53]
[4, -55]
[8, -54]
[1, -55]
[2, -56]
[72, -62]
[1/5, -11]

"""
